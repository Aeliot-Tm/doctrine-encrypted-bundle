services:
    _defaults:
        autowire: true
        autoconfigure: true

    _instanceof:
        Aeliot\Bundle\DoctrineEncrypted\Service\FunctionPlatformProviderInterface:
            tags: [ aeliot_doctrine_encrypted.function_platform_provider ]

        Doctrine\Common\EventSubscriber:
            tags: [ doctrine.event_subscriber ]

    Aeliot\Bundle\DoctrineEncrypted\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Doctrine/'
            - '../src/Exception/'
            - '../src/AeliotDoctrineEncryptedBundle.php'

    Aeliot\Bundle\DoctrineEncrypted\EventListener\LoadClassMetadataListener:
        tags:
            - { name: doctrine.event_listener, event: loadClassMetadata }

    Aeliot\Bundle\DoctrineEncrypted\Service\DefaultFunctionProvider:
        arguments:
            $functionPlatformProviders: !tagged_iterator aeliot_doctrine_encrypted.function_platform_provider

    Aeliot\Bundle\DoctrineEncrypted\Service\EncryptedConnectionsRegistry:
        arguments:
            $encryptedConnections: '%aeliot.doctrine_encrypted.encrypted_connections%'

    Aeliot\Bundle\DoctrineEncrypted\Service\ConnectionPreparerInterface:
        alias: 'Aeliot\Bundle\DoctrineEncrypted\Service\DefaultConnectionPreparer'

    Aeliot\Bundle\DoctrineEncrypted\Service\EncryptionAvailabilityCheckerInterface:
        alias: 'Aeliot\Bundle\DoctrineEncrypted\Service\DefaultEncryptionAvailabilityChecker'

    Aeliot\Bundle\DoctrineEncrypted\Service\SecretProviderInterface:
        alias: 'Aeliot\Bundle\DoctrineEncrypted\Service\DefaultSecretProvider'

    Aeliot\Bundle\DoctrineEncrypted\Service\FunctionProviderInterface:
        alias: 'Aeliot\Bundle\DoctrineEncrypted\Service\FunctionManager'

    Aeliot\DoctrineEncrypted\Contracts\CryptographicSQLFunctionNameProviderInterface:
        alias: 'Aeliot\Bundle\DoctrineEncrypted\Service\DefaultCryptographicSQLFunctionNameProvider'
        public: true

    Doctrine\Persistence\ConnectionRegistry: '@Doctrine\Common\Persistence\ManagerRegistry'
